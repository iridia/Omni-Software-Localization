The development team has a very precise definition of not only what we want to accomplish, but how we want to accomplish it. Testing is a big part of how we want to accomplish our goals. We work very effectively and efficiently and we think that our rigorous testing solution has been a big part of that. From Day 1 of coding, we have set up a testing solution that works for us.

Localize has four primary modes of testing. We do development testing that includes unit testing, pair programming and test driven development. We leverage automated testing in the form of build severs, continuous integration and a regression test suite. We have informal, ad-hoc user acceptance testing that tests user stories against the test server. Finally, we incorporate a user feedback and error system into our application that has been running for several months.

h2. Development Testing

In this mode of testing, our primary concern is to reduce development pain. The bonus of having a more stable system and a regression test suite that pipes into the Automated Testing mode is just that--a bonus. In this mode, our goal is to practice test driven development: we write unit tests, make those tests pass and refactor. We also practice some other extreme programming methods such as pair programming.

h2. Automated Testing

We put a lot of up front time and effort into creating an automated testing solution. We use a build / continuous integration server using Hudson that leverages the rake build system to build our code and run our regression test suite (that is created by the unit testing and TDD practices in the previous mode). The solution gives the team immediate feedback on if our application is in a good state. It is something that we don't have to think about, as well.

h2. Acceptance Testing

In the acceptance testing mode, we have performed most of the acceptance tests in an ad-hoc manner. We have a test server that is automated populated by the build server when a successful build of our system occurs (so it is both a staging and test server). We throw tests and user stories at this test server on a pretty random basis. However, before each release, we have run a full gambit of user stories against the test server (along with some difficult input such as very large .apps).

h2. User Feedback

From the beginning we have enabled this mode and we feel that this is a key to success in our application. We allowed users to provide feedback (and, later, enabled automatic crash reporting) on our application so that we can tailor the application to the needs of the customer. This system has been so effective that our client has used this (alongside email for discussions) to provide the team feedback about the releases. After gather the data on our system, we fold the issues that the users brought up and triage them.