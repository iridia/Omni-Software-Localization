Testing is a very important part of software development. Early on the Localize team decided that testing would play a large role in development. A basic test architecture has been developed over time which allows the team to work efficiently and produce a high-quality product.

Localize has four primary modes of testing:  development testing, automated testing, acceptance testing, and user feedback. This document will describe these various parts of testing.

h2. Development Testing

The primary goal of development testing is to have all the benefits of testing, but with as little overhead to the developer as possible. Unit tests are the primary form of testing during development. In addition, the Localize team practices test driven development (TDD). The basics of TDD are:  write unit tests, make the unit tests pass, and refactor the code to improve it while still passing the tests. Pair programming is also used occasionally to help reduce new bugs that are introduced.

As a bonus, the unit tests created during the development phase also provide a large regression test suite. The development team is encouraged to be continuously running the test suite (perhaps even using an autotest library) so that with each change, the developer instantly knows if she broke anything.

h2. Automated Testing

Testing is a pain, but the benefits of testing are so large that it would be unwise not to test. Therefore, the Localize team has made sure that tests are as automated as possible. The parts of automated testing include development testing in the form of unit tests (see above) and an automatic build and continuous integration server. The build server automatically pulls the latest code with every commit to source control. It then runs all the unit tests to make sure they pass on a production-like machine. Finally, if all the tests pass, the build server will build the application and move it to where it can be used by the team. The team can then do manual acceptance tests of the application on an actual production-like machine (see the next section).

h2. Acceptance Testing

The production-like build and continuous integration server (see above) is also the platform for acceptance testing. During development, the Localize team is encouraged to perform ad-hoc acceptance tests on the server. Also, before each release the team will perform a number of acceptance tests and user stories on the test server. These include common and uncommon user actions, difficult user input (such as very large application bundles), and some basic forms of regression tests. This hopefully will catch any last-minute bugs and is a great way to ensure a high quality release before shipping.

h2. User Feedback

Gathering user feedback has played a large role in the development and direction of Localize. While user feedback may not be a form of testing, it is a way to ensure a high-quality application that users will enjoy using. For this reason, the Localize team created an easy way for users to provide feedback at an early stage. All data that is gathered through this system is considered highly by the team for future releases.

This feedback has been so useful that the team wanted to gather even more information from the field. So an automatic error logger was created to catch all our users' crashes. The development team can see these bug reports and determine what the most likely causes of crash are in Localize. Any crash reports gathered are considered during the planning for future releases.